// Code generated by mockery v2.20.0. DO NOT EDIT.

package dependencies

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCoreCacheInterface is an autogenerated mock type for the CoreCacheInterface type
type MockCoreCacheInterface struct {
	mock.Mock
}

type MockCoreCacheInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoreCacheInterface) EXPECT() *MockCoreCacheInterface_Expecter {
	return &MockCoreCacheInterface_Expecter{mock: &_m.Mock}
}

// Decr provides a mock function with given fields: key
func (_m *MockCoreCacheInterface) Decr(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoreCacheInterface_Decr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decr'
type MockCoreCacheInterface_Decr_Call struct {
	*mock.Call
}

// Decr is a helper method to define mock.On call
//  - key string
func (_e *MockCoreCacheInterface_Expecter) Decr(key interface{}) *MockCoreCacheInterface_Decr_Call {
	return &MockCoreCacheInterface_Decr_Call{Call: _e.mock.On("Decr", key)}
}

func (_c *MockCoreCacheInterface_Decr_Call) Run(run func(key string)) *MockCoreCacheInterface_Decr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCoreCacheInterface_Decr_Call) Return(_a0 error) *MockCoreCacheInterface_Decr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoreCacheInterface_Decr_Call) RunAndReturn(run func(string) error) *MockCoreCacheInterface_Decr_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCoreCacheInterface) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreCacheInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCoreCacheInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - key string
func (_e *MockCoreCacheInterface_Expecter) Get(key interface{}) *MockCoreCacheInterface_Get_Call {
	return &MockCoreCacheInterface_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockCoreCacheInterface_Get_Call) Run(run func(key string)) *MockCoreCacheInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCoreCacheInterface_Get_Call) Return(_a0 string, _a1 error) *MockCoreCacheInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoreCacheInterface_Get_Call) RunAndReturn(run func(string) (string, error)) *MockCoreCacheInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: key
func (_m *MockCoreCacheInterface) Incr(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoreCacheInterface_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type MockCoreCacheInterface_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//  - key string
func (_e *MockCoreCacheInterface_Expecter) Incr(key interface{}) *MockCoreCacheInterface_Incr_Call {
	return &MockCoreCacheInterface_Incr_Call{Call: _e.mock.On("Incr", key)}
}

func (_c *MockCoreCacheInterface_Incr_Call) Run(run func(key string)) *MockCoreCacheInterface_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCoreCacheInterface_Incr_Call) Return(_a0 error) *MockCoreCacheInterface_Incr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoreCacheInterface_Incr_Call) RunAndReturn(run func(string) error) *MockCoreCacheInterface_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, expr
func (_m *MockCoreCacheInterface) Set(key string, value interface{}, expr time.Duration) error {
	ret := _m.Called(key, value, expr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoreCacheInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCoreCacheInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//  - key string
//  - value interface{}
//  - expr time.Duration
func (_e *MockCoreCacheInterface_Expecter) Set(key interface{}, value interface{}, expr interface{}) *MockCoreCacheInterface_Set_Call {
	return &MockCoreCacheInterface_Set_Call{Call: _e.mock.On("Set", key, value, expr)}
}

func (_c *MockCoreCacheInterface_Set_Call) Run(run func(key string, value interface{}, expr time.Duration)) *MockCoreCacheInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCoreCacheInterface_Set_Call) Return(_a0 error) *MockCoreCacheInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoreCacheInterface_Set_Call) RunAndReturn(run func(string, interface{}, time.Duration) error) *MockCoreCacheInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCoreCacheInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCoreCacheInterface creates a new instance of MockCoreCacheInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCoreCacheInterface(t mockConstructorTestingTNewMockCoreCacheInterface) *MockCoreCacheInterface {
	mock := &MockCoreCacheInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
